#include<iostream>
#include<cmath>
using namespace std;
int main(){
	unsigned int a,b;
	while(cin>>a>>b)  
	{
		
		if (a==0 && b==0)
			break;
			
		unsigned int Abang[11]={0}; //最多有10+1位 
		unsigned int Bbang[11]={0};
		
		int i=0;
		for(i=0 ; i<=9 ; i++)
		{	
		
			Abang[i] = (a / (int)round(pow(10 , i))) % 10; //儲存保留幾位數 
			//首先要把該位元後面的數字都去掉，所以用/法，因為%只能去掉該位元前面的數字 注意Cmath的pow回傳是double型態 故要轉型 
			Bbang[i] = (b / (int)round(pow(10 , i))) % 10; 
			//然而發現輸入594 變成694 輸入9999 變成99191 WHY? 
	                //解:https://blog.csdn.net/Shenpibaipao/article/details/78560151
			//原因出在pow的算法 10的2次方算出來其實是 99.99999~  而我們用int強制轉型時會將小數去掉 變成99
			//所以先使用四捨五入函數round 再轉型即可 PS.我的Dev-c++沒有此問題 看來是不同平台的問題
			
		}
		
		int carry = 0;
		
		for(i=0 ; i<=9 ; i++)
		{
			if ((Abang[i] + Bbang[i]) >= 10 )  //判斷進位 
			{
				carry++;
								//進位給下一位 
								
				int j=1;
				Abang[i+j] += 1;
				while ((Abang[i+j])  >= 10)  //然而如果此進位又導致對方進位  要一直進位直到沒超過10  
				{
					carry++;
					Abang[i+j] %= 10; //留下個位數 
					j++; 
					Abang[i+j] += 1;
				}
			}  
			
		}

		if(carry==0)
			cout<<"No carry operation."<<endl;
		else if(carry==1)
			cout<<"1 carry operation."<<endl;
		else
			cout<<carry<<" carry operations."<<endl;
		
	}
	return 0;
}
